#include<io.h>
#include<stdio.h>
#include<dos.h>
#include<string.h>
#include<math.h>
#include<stdio.h>
#include<bios.h>
#include<mem.h>
#include<fcntl.h>
#include<stdlib.h>
#include<conio.h>
#include"./header/SVGA.h"
#include "./header/mouse.h"
#include "./header/head.h"

#define MOUSE_INT 0x33
int load1[19][2] = {1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14,
                    15, 15, 16, 16, 17, 17, 18, 18, 19, 19};

int load2[418][2] = {2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 1, 9, 1, 10, 1, 11, 1, 12, 1,
                     3, 2, 4, 2, 5, 2, 6, 2, 7, 2, 8, 2, 9, 2, 10, 2, 11, 2, 12, 2, 13, 2,
                     4, 3, 5, 3, 6, 3, 7, 3, 8, 3, 9, 3, 10, 3, 11, 3, 12, 3, 13, 3, 14, 3,
                     5, 4, 6, 4, 7, 4, 8, 4, 9, 4, 10, 4, 11, 4, 12, 4, 13, 4, 14, 4, 15, 4,
                     6, 5, 7, 5, 8, 5, 9, 5, 10, 5, 11, 5, 12, 5, 13, 5, 14, 5, 15, 5, 16, 5,
                     7, 6, 8, 6, 9, 6, 10, 6, 11, 6, 12, 6, 13, 6, 14, 6, 15, 6, 16, 6, 17, 6,
                     8, 7, 9, 7, 10, 7, 11, 7, 12, 7, 13, 7, 14, 7, 15, 7, 16, 7, 17, 7, 18, 7,
                     9, 8, 10, 8, 11, 8, 12, 8, 13, 8, 14, 8, 15, 8, 16, 8, 17, 8, 18, 8, 19, 8,
                     10, 9, 11, 9, 12, 9, 13, 9, 14, 9, 15, 9, 16, 9, 17, 9, 18, 9, 19, 9, 20, 9,
                     11, 10, 12, 10, 13, 10, 14, 10, 15, 10, 16, 10, 17, 10, 18, 10, 19, 10, 20, 10, 21, 10,
                     12, 11, 13, 11, 14, 11, 15, 11, 16, 11, 17, 11, 18, 11, 19, 11, 20, 11, 21, 11, 22, 11,
                     13, 12, 14, 12, 15, 12, 16, 12, 17, 12, 18, 12, 19, 12, 20, 12, 21, 12, 22, 12, 23, 12,
                     14, 13, 15, 13, 16, 13, 17, 13, 18, 13, 19, 13, 20, 13, 21, 13, 22, 13, 23, 13, 24, 13,
                     15, 14, 16, 14, 17, 14, 18, 14, 19, 14, 20, 14, 21, 14, 22, 14, 23, 14, 24, 14, 25, 14,
                     16, 15, 17, 15, 18, 15, 19, 15, 20, 15, 21, 15, 22, 15, 23, 15, 24, 15, 25, 15, 26, 15,
                     17, 16, 18, 16, 19, 16, 20, 16, 21, 16, 22, 16, 23, 16, 24, 16, 25, 16, 26, 16, 27, 16,
                     18, 17, 19, 17, 20, 17, 21, 17, 22, 17, 23, 17, 24, 17, 25, 17, 26, 17, 27, 17, 28, 17,
                     19, 18, 20, 18, 21, 18, 22, 18, 23, 18, 24, 18, 25, 18, 26, 18, 27, 18, 28, 18, 29, 18,
                     20, 19, 21, 19, 22, 19, 23, 19, 24, 19, 25, 19, 26, 19, 27, 19, 28, 19, 29, 19, 30, 19,
                     1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 1, 9, 1, 10, 1, 11, 1, 12,
                     2, 3, 2, 4, 2, 5, 2, 6, 2, 7, 2, 8, 2, 9, 2, 10, 2, 11, 2, 12, 2, 13,
                     3, 4, 3, 5, 3, 6, 3, 7, 3, 8, 3, 9, 3, 10, 3, 11, 3, 12, 3, 13, 3, 14,
                     4, 5, 4, 6, 4, 7, 4, 8, 4, 9, 4, 10, 4, 11, 4, 12, 4, 13, 4, 14, 4, 15,
                     5, 6, 5, 7, 5, 8, 5, 9, 5, 10, 5, 11, 5, 12, 5, 13, 5, 14, 5, 15, 5, 16,
                     6, 7, 6, 8, 6, 9, 6, 10, 6, 11, 6, 12, 6, 13, 6, 14, 6, 15, 6, 16, 6, 17,
                     7, 8, 7, 9, 7, 10, 7, 11, 7, 12, 7, 13, 7, 14, 7, 15, 7, 16, 7, 17, 7, 18,
                     8, 9, 8, 10, 8, 11, 8, 12, 8, 13, 8, 14, 8, 15, 8, 16, 8, 17, 8, 18, 8, 19,
                     9, 10, 9, 11, 9, 12, 9, 13, 9, 14, 9, 15, 9, 16, 9, 17, 9, 18, 9, 19, 9, 20,
                     10, 11, 10, 12, 10, 13, 10, 14, 10, 15, 10, 16, 10, 17, 10, 18, 10, 19, 10, 20, 10, 21,
                     11, 12, 11, 13, 11, 14, 11, 15, 11, 16, 11, 17, 11, 18, 11, 19, 11, 20, 11, 21, 11, 22,
                     12, 13, 12, 14, 12, 15, 12, 16, 12, 17, 12, 18, 12, 19, 12, 20, 12, 21, 12, 22, 12, 23,
                     13, 14, 13, 15, 13, 16, 13, 17, 13, 18, 13, 19, 13, 20, 13, 21, 13, 22, 13, 23, 13, 24,
                     14, 15, 14, 16, 14, 17, 14, 18, 14, 19, 14, 20, 14, 21, 14, 22, 14, 23, 14, 24, 14, 25,
                     15, 16, 15, 17, 15, 18, 15, 19, 15, 20, 15, 21, 15, 22, 15, 23, 15, 24, 15, 25, 15, 26,
                     16, 17, 16, 18, 16, 19, 16, 20, 16, 21, 16, 22, 16, 23, 16, 24, 16, 25, 16, 26, 16, 27,
                     17, 18, 17, 19, 17, 20, 17, 21, 17, 22, 17, 23, 17, 24, 17, 25, 17, 26, 17, 27, 17, 28,
                     18, 19, 18, 20, 18, 21, 18, 22, 18, 23, 18, 24, 18, 25, 18, 26, 18, 27, 18, 28, 18, 29,
                     19, 20, 19, 21, 19, 22, 19, 23, 19, 24, 19, 25, 19, 26, 19, 27, 19, 28, 19, 29, 19, 30};
int mousearrows[290][2] = {1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 1, 9, 1, 10, 1, 11, 1, 12, 1, 13, 1, 14, 1,
                           15,
                           1, 16, 1, 17, 1, 18, 1, 19, 1, 20, 1, 21, 1, 22,
                           2, 2, 2, 3, 2, 4, 2, 5, 2, 6, 2, 7, 2, 8, 2, 9, 2, 10, 2, 11, 2, 12, 2, 13, 2, 14, 2, 15, 2,
                           16, 2, 17, 2, 18, 2, 19, 2, 20, 2, 21,
                           3, 3, 3, 4, 3, 5, 3, 6, 3, 7, 3, 8, 3, 9, 3, 10, 3, 11, 3, 12, 3, 13, 3, 14, 3, 15, 3, 16, 3,
                           17, 3, 18, 3, 19, 3, 20, 3, 21,
                           4, 4, 4, 5, 4, 6, 4, 7, 4, 8, 4, 9, 4, 10, 4, 11, 4, 12, 4, 13, 4, 14, 4, 15, 4, 16, 4, 17,
                           4,
                           18, 4, 19, 4, 20,
                           5, 4, 5, 5, 5, 6, 5, 7, 5, 8, 5, 9, 5, 10, 5, 11, 5, 12, 5, 13, 5, 14, 5, 15, 5, 16, 5,
                           17, 5, 18, 5, 19, 5, 20,
                           6, 5, 6, 6, 6, 7, 6, 8, 6, 9, 6, 10, 6, 11, 6, 12, 6, 13, 6, 14, 6, 15, 6, 16, 6, 17, 6, 18,
                           6, 19,
                           7, 6, 7, 7, 7, 8, 7, 9, 7, 10, 7, 11, 7, 12, 7, 13, 7, 14, 7, 15, 7, 16, 7, 17, 7, 18, 7, 19,
                           8, 6, 8, 7, 8, 8, 8, 9, 8, 10, 8, 11, 8, 12, 8, 13, 8, 14, 8, 15, 8, 16, 8, 17, 8, 18, 8, 19,
                           8, 20,
                           9, 7, 9, 8, 9, 9, 9, 10, 9, 11, 9, 12, 9, 13, 9, 14, 9, 15, 9, 16, 9, 17, 9, 18, 9, 19, 9,
                           20, 9, 21,
                           10, 8, 10, 9, 10, 10, 10, 11, 10, 12, 10, 13, 10, 14, 10, 15, 10, 16, 10, 17, 10, 18, 10, 19,
                           10, 20, 10, 21, 10, 22, 10, 23,
                           11, 8, 11, 9, 11, 10, 11, 11, 11, 12, 11, 13, 11, 14, 11, 15, 11, 16, 11, 17, 11, 18, 11, 19,
                           11, 20, 11, 21, 11, 22, 11, 23, 11, 24, 11, 25,
                           12, 9, 12, 10, 12, 11, 12, 12, 12, 13, 12, 14, 12, 15, 12, 16, 12, 17, 12, 18, 12, 19, 12,
                           20, 12, 21, 12, 22, 12, 23, 12, 24, 12, 25, 12, 26, 12, 27,
                           13, 10, 13, 11, 13, 12, 13, 13, 13, 14, 13, 15, 13, 16, 13, 17, 13, 18, 13, 19, 13, 20, 13,
                           21, 13, 22, 13, 23, 13, 24, 13, 25, 13, 26, 13, 27, 13, 28, 13, 29,
                           14, 10, 14, 11, 14, 12, 14, 13, 14, 14, 14, 15, 14, 16, 14, 17, 14, 18, 14, 19, 14, 20, 14,
                           21, 14, 22, 14, 23, 14, 24, 14, 25, 14, 26, 14, 27, 14, 28, 14, 29, 14, 30,
                           15, 11, 15, 12, 15, 13, 15, 14, 15, 15, 15, 20, 15, 21, 15, 22, 15, 23, 15, 24, 15, 25, 15,
                           26, 15, 27, 15, 28, 15, 29,
                           16, 12, 16, 13, 16, 14, 16, 15, 16, 21, 16, 22, 16, 23, 16, 24, 16, 25, 16, 26, 16, 27, 16,
                           28,
                           17, 12, 17, 13, 17, 14, 17, 23, 17, 24, 17, 25, 17, 26, 17, 27,
                           18, 13, 18, 14, 18, 25, 18, 26, 18, 27,
                           19, 13, 19, 26};
int Imouse[160][2] = {0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, 10, 0, 11, 0, 12, 0, 13, 0,
                      0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 1, 9, 1, 10, 1, 11, 1, 12, 1, 13, 1,
                      0, 28, 1, 28, 2, 28, 3, 28, 4, 28, 5, 28, 6, 28, 7, 28, 8, 28, 9, 28, 10, 28, 11, 28, 12, 28, 13,
                      28,
                      0, 29, 1, 29, 2, 29, 3, 29, 4, 29, 5, 29, 6, 29, 7, 29, 8, 29, 9, 29, 10, 29, 11, 29, 12, 29, 13,
                      29,
                      5, 2, 5, 3, 5, 4, 5, 5, 5, 6, 5, 7, 5, 8, 5, 9, 5, 10, 5, 11, 5, 12, 5, 13, 5, 14, 5, 15, 5, 16,
                      5, 17, 5, 18, 5, 19, 5, 20, 5, 21, 5, 22, 5, 23, 5, 24, 5, 25, 5, 26, 5, 27,
                      6, 2, 6, 3, 6, 4, 6, 5, 6, 6, 6, 7, 6, 8, 6, 9, 6, 10, 6, 11, 6, 12, 6, 13, 6, 14, 6, 15, 6, 16,
                      6, 17, 6, 18, 6, 19, 6, 20, 6, 21, 6, 22, 6, 23, 6, 24, 6, 25, 6, 26, 6, 27,
                      7, 2, 7, 3, 7, 4, 7, 5, 7, 6, 7, 7, 7, 8, 7, 9, 7, 10, 7, 11, 7, 12, 7, 13, 7, 14, 7, 15, 7, 16,
                      7, 17, 7, 18, 7, 19, 7, 20, 7, 21, 7, 22, 7, 23, 7, 24, 7, 25, 7, 26, 7, 27,
                      8, 2, 8, 3, 8, 4, 8, 5, 8, 6, 8, 7, 8, 8, 8, 9, 8, 10, 8, 11, 8, 12, 8, 13, 8, 14, 8, 15, 8, 16,
                      8, 17, 8, 18, 8, 19, 8, 20, 8, 21, 8, 22, 8, 23, 8, 24, 8, 25, 8, 26, 8, 27};
extern int mimage1[16][10] = {                       //鼠标指针形状数组
        {1, 1, 3, 3, 3, 3, 3, 3, 3, 3},
        {1, 2, 1, 3, 3, 3, 3, 3, 3, 3},
        {1, 2, 2, 1, 3, 3, 3, 3, 3, 3},
        {1, 2, 2, 2, 1, 3, 3, 3, 3, 3},
        {1, 2, 2, 2, 2, 1, 3, 3, 3, 3},
        {1, 2, 2, 2, 2, 2, 1, 3, 3, 3},
        {1, 2, 2, 2, 2, 2, 2, 1, 3, 3},
        {1, 2, 2, 2, 2, 2, 2, 2, 1, 3},
        {1, 2, 2, 2, 2, 2, 2, 2, 2, 1},
        {1, 2, 2, 2, 2, 2, 2, 1, 3, 3},
        {1, 2, 2, 2, 2, 2, 1, 3, 3, 3},
        {1, 2, 1, 3, 1, 2, 2, 1, 3, 3},
        {1, 1, 3, 3, 1, 2, 2, 1, 3, 3},
        {3, 3, 3, 3, 3, 1, 2, 2, 1, 3},
        {3, 3, 3, 3, 3, 1, 2, 2, 1, 3},
        {3, 3, 3, 3, 3, 3, 1, 2, 2, 1}};


void set_mouse(void)                //初始化鼠标及限定鼠标范围
{
    union REGS r;
    r.x.ax = 0x00;
    int86(MOUSE_INT, &r, &r);
    r.x.ax = 0x07;
    r.x.cx = 0;
    r.x.dx = 1023;
    int86(0x33, &r, &r);
    r.x.ax = 0x08;
    r.x.cx = 0;
    r.x.dx = 767;
    int86(MOUSE_INT, &r, &r);
}

void mouse_copy(MOUSE *mouse)     //保存鼠标指针覆盖区域的函数
{
    int i, j, n = 0;
    long newpage, oldpage;
    unsigned long position;
    short far
    *video_buffer =(short far
    *)0xA0000000L;

    oldpage = ((mouse->pos_y * 1024 + mouse->pos_x) * 2) / 65536L;    //初始化页码
    newpage = oldpage;
    selectpage(oldpage);

    for (i = mouse->pos_y; i < mouse->pos_y + 16; i++) {
        for (j = mouse->pos_x; j < mouse->pos_x + 10; j++, n++) {
            position = i * (long) 1024 + j;
            newpage = position * 2 / 65536;
            if (newpage != oldpage)            //调用换页函数
            {
                selectpage(newpage);
                oldpage = newpage;
            }
            mouse->save_mouse[n] = *(video_buffer + i * 1024 + j);
        }
    }
}

void mouse_recover(MOUSE *mouse)      //恢复鼠标指针覆盖区域的函数
{
    int i, j, n = 0;
    long newpage, oldpage;
    unsigned long position;
    short far
    *video_buffer =(short far
    *)0xA0000000L;

    oldpage = ((mouse->oldy * 1024 + mouse->oldx) * 2) / 65536L;    //初始化页码
    newpage = oldpage;
    selectpage(oldpage);

    for (i = mouse->oldy; i < mouse->oldy + 16; i++) {
        for (j = mouse->oldx; j < mouse->oldx + 10; j++, n++) {
            position = i * (long) 1024 + j;
            newpage = position * 2 / 65536;
            if (newpage != oldpage)            //调用换页函数
            {
                selectpage(newpage);
                oldpage = newpage;
            }
            *(video_buffer + i * 1024 + j) = mouse->save_mouse[n];    //将保存的图重新贴回原先的地方
        }
    }
}

void mouse_show(MOUSE *mouse)        //显示鼠标指针的函数
{
    int i, j;

    for (i = 0; i < 16; i++)                   //将鼠标指针输出屏幕
        for (j = 0; j < 10; j++)
            if ((mouse->pos_x + j) >= 0 && (mouse->pos_x + j) < 1024 && (mouse->pos_y + i) >= 0 &&
                (mouse->pos_y + i) <= 768)       //鼠标指针显示范围，界定在逻辑屏幕内
            {
                if (mimage1[i][j] == 1)               //1为鼠标边界的点
                    put_pixel(mouse->pos_x + j, mouse->pos_y + i, 0);
                if (mimage1[i][j] == 2)               //2为鼠标内部的点
                    put_pixel(mouse->pos_x + j, mouse->pos_y + i, 0xffff);
            }

    mouse->oldx = mouse->pos_x;                //统一新坐标和旧坐标
    mouse->oldy = mouse->pos_y;
}

void drawmouse(MOUSE *mouse)         //画鼠标指针函数
{
    if (mouse->pos_x != mouse->oldx || mouse->pos_y != mouse->oldy) {
        mouse_recover(mouse);          /*将鼠标指针原来所在位置的图像块还原*/

        mouse_copy(mouse);             /*保存鼠标指针下一移动处的10*16块图像*/

        mouse_show(mouse);                /*画出鼠标指针*/
    }
}

void mouse_reset(MOUSE *mouse)   //当鼠标所在位置屏幕图像重载时使用
{
    mouse_copy(mouse);
    mouse_show(mouse);
}


void mouse_read(int *mouse_x, int *mouse_y, int *mouse_butt) /* 读鼠标的位置和按钮状态函数 */
{
    union REGS regs1, regs2;
    int x_new, y_new;
    *mouse_butt = 0;


    regs1.x.ax = 3;
    int86(51, &regs1, &regs2);
    x_new = regs2.x.cx;
    y_new = regs2.x.dx;
    *mouse_butt = regs2.x.bx;


/*-----记录下此时新的坐标---------*/
    *mouse_x = x_new;
    *mouse_y = y_new;


    /*------对鼠标状况进行统一-----*/
    if ((*mouse_butt) != 0) {
        *mouse_butt = *mouse_butt + 0;
    } else {
        *mouse_butt = 0;
    }
}

void mouse_position(MOUSE *mouse)         //获取鼠标热点位置
{
    union REGS inregs, outregs;
    inregs.x.ax = 0x03;
    int86(MOUSE_INT, &inregs, &outregs);
    mouse->pos_x = outregs.x.cx;
    mouse->pos_y = outregs.x.dx;
    mouse->button = outregs.x.bx;
}

void MouseShape(void *buff)/*设置鼠标的形状*/
{

    int mousex = 0, mousey = 0, mousekey = 0, i;
    long size;
    mouse_read(&mousex, &mousey, &mousekey);
    get_image(mousex, mousey, mousex + 30, mousey + 30, (short far *)buff);
    if (mousex + 32 > 1020) {
        get_image(mousex, mousey, 1023, mousey + 30, (short far *)buff);
    }
    for (i = 0; i < 160; i++) {
        put_pixel(Imouse[i][0] + mousex, Imouse[i][1] + mousey, 0);//画点
    }
    delay(110);
    put_image(mousex, mousey, mousex + 30, mousey + 30, (short far *)buff);
}
